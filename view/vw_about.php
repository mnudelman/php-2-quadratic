<?php
/**
 * текст - описание сайта
 * Date: 06.06.15
 */
?>
<div class="comment">
    <p><strong>Решение квадратного уравнения</strong></p>

    <p>
        Реализуется обычный алгоритм решения квадратного уравнения.
    </p>
    <p>
        Можно задать коэффициенты уравнения и получить решение. Или запустить генератор,
        который выбирает коэффициенты случайным образом из интервала 0 - 100 .
        Каждый запуск генератора пораждает 50 расчетов.
    </p>
    <p>
        Интерес представляет статистика, показанная перед таблицей решений.
        При случайной генерации коэффициентов только около 20% комбинаций дают действительные решения.
    </p>
    <h3>Реализация  MVC</h3>
    <p><strong>Контроллеры:</strong>  <br>
        <i>(cnt_quadric)</i>  - управляет прцессом решения
        Диспетчерезацию контроллеров выполняет объект класса Router.<br>
        Router  передает контроллеру массив данных из формы(форма предает имя своего контроллера),
        контороллер обрабатывает полученные данные и  формирует новый массив.
        Router, получив массив данных от контроллера, вместе с именем контроллера
        передает их в <i>ViewDriver</i> - управление представлениями.

    </p>
    <p>
        <strong> Модели -</strong> <br>
        - <i>mod_quadratic</i> - класс, реализующий алгоритм решения уравнения <br>

    </p>
    <p>
        <strong>Представления</strong> состоят из двух частей: <br>
        - шаблоны расположения (layouts) - это html файлы с префиксом lt_, которые подгружают формы контроллеров.<br>
        - формы контроллеров .<br>
        Диспетчеризацию представлений выполняет объект класса <i>ViewDriver</i>.<br>
        По имени котроллера определяет соответствующие форму, шаблон расположения и
        выводит в окно браузера.
    </p>
    <p>
        Статический класс <i>TaskStore</i> используется для хранения общих параметров задачи.

    </p>

    <h3> Алгоритм расчета из класса mod_quadratic</h3>
    <p >

        <pre class="programText">
 public function calculate() {
        $epsilon = TaskStore::EPSILON ;
        $x1 = 0;
        $x2 = 0;
        $x1_i = 0 ;
        $x2_i = 0 ;
        /* !!  - opCod == "clc" - расчет корней **/
        $d = $this->b * $this->b - 4 * $this->a * $this->c;
        /** Дескриминант  */
        $d = (abs($d) < $epsilon) ? 0 : $d;
        /** малое d - считаем за 0   */
        $dSign = ($d < 0) ? -1 : (($d > 0) ? 1 : 0);
        switch ($dSign) {
            case 1:
                $q = sqrt($d);
                $x1 = (-$this->b + $q) / (2 * $this->a);
                $x2 = (-$this->b - $q) / (2 * $this->a);
                break;
            case 0:
                $x1 = -$this->b / (2 * $this->a);
                $x2 = $x1;
                break;
            case -1;
                $q = sqrt(-$d);
                $x1 = -$this->b/ (2 * $this->a) ;
                $x1_i = $q / (2 * $this->a);
                $x2 = -$this->b / (2 * $this->a);
                $x2_i = -$q / (2 * $this->a);
                break;
        }
        $this->x1 = $x1 ;
        $this->x2 = $x2 ;
        $this->x1_i = $x1_i ;
        $this->x2_i = $x2_i ;
        $this->D = $d ;
        $this->solution['x1'] = [
            'real' => $this->x1,
            'image'=> $this->x1_i ] ;
        $this->solution['x2'] = [
            'real' => $this->x2,
            'image'=> $this->x2_i ] ;
        $this->delta['x1'] = $this->deltaClc($this->x1,$this->x1_i) ;
        $this->delta['x2'] = $this->deltaClc($this->x2,$this->x2_i) ;
    }

    </pre>
    </p>


</div>
